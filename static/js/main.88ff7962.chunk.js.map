{"version":3,"sources":["route/config.ts","components/PageLoading/index.tsx","page/index.ts","route/index.tsx","components/NavBar/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["routeConfig","title","path","component","className","xmlns","x","y","width","height","fill","opacity","attributeName","attributeType","values","begin","dur","repeatCount","lazy","React","Home","Banner","Suspense","fallback","map","ele","index","exact","key","render","props","Component","allPages","withRouter","useState","navList","setList","useEffect","history","location","pathname","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88ff7962.chunk.js","sourcesContent":["// 定义路由表接口\r\nexport interface IFMenu {\r\n    title: string;\r\n    path: string;\r\n    component: string;\r\n}\r\n// 路由表配置\r\nexport const routeConfig: IFMenu[] = [\r\n    { title: '', path: '/Home', component: 'Home' },\r\n    { title: '', path: '/', component: 'Banner' },\r\n];\r\n","import React from 'react';\r\nimport './index.scss';\r\nexport default () => {\r\n    return (\r\n        <div className=\"blog_loading\">\r\n                <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                    <rect x=\"0\" y=\"7.6416\" width=\"10\" height=\"14.7168\" fill=\"#FF6700\" opacity=\"0.2\">\r\n                        <animate attributeName=\"opacity\" attributeType=\"XML\" values=\"0.2; 1; .2\" begin=\"0s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                        <animate attributeName=\"height\" attributeType=\"XML\" values=\"90; 40; 90\" begin=\"0s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                        <animate attributeName=\"y\" attributeType=\"XML\" values=\"15; 0; 15\" begin=\"0s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                    </rect>\r\n                    <rect x=\"19\" y=\"5.1416\" width=\"10\" height=\"19.7168\" fill=\"#FF6700\" opacity=\"0.2\">\r\n                        <animate attributeName=\"opacity\" attributeType=\"XML\" values=\"0.2; 1; .2\" begin=\"0.15s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                        <animate attributeName=\"height\" attributeType=\"XML\" values=\"90; 40; 90\" begin=\"0.15s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                        <animate attributeName=\"y\" attributeType=\"XML\" values=\"15; 0; 15\" begin=\"0.15s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                    </rect>\r\n                    <rect x=\"38\" y=\"7.3584\" width=\"10\" height=\"15.2832\" fill=\"#FF6700\" opacity=\"0.2\">\r\n                        <animate attributeName=\"opacity\" attributeType=\"XML\" values=\"0.2; 1; .2\" begin=\"0.3s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                        <animate attributeName=\"height\" attributeType=\"XML\" values=\"90; 40; 90\" begin=\"0.3s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                        <animate attributeName=\"y\" attributeType=\"XML\" values=\"15; 0; 15\" begin=\"0.3s\" dur=\"0.9s\" repeatCount=\"indefinite\"></animate>\r\n                    </rect>\r\n                </svg>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nconst { lazy } = React;\r\nexport default {\r\n    Home: lazy(() => import('./Home')),\r\n    Banner: lazy(() => import('./Banner')),\r\n} as any;\r\n","import React from 'react';\r\nimport { routeConfig, IFMenu } from './config';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport DocumentTitle from 'react-document-title';\r\nimport PageLoading from 'components/PageLoading';\r\nimport allPages from '../page';\r\nexport default () => {\r\n    return (\r\n        <React.Suspense fallback={<PageLoading/>}>\r\n            <Switch>\r\n                {routeConfig.map((ele: IFMenu, index: number) => {\r\n                    return (\r\n                        <Route\r\n                            exact\r\n                            key={index}\r\n                            path={ele.path}\r\n                            render={props => {\r\n                                const Component = allPages[ele.component];\r\n                                const WrapComponent = (\r\n                                    <DocumentTitle title={ele.title}>\r\n                                        <Component {...props}/>\r\n                                    </DocumentTitle>\r\n                                );\r\n                                return WrapComponent;\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n            </Switch>\r\n        </React.Suspense>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './index.scss';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nconst NavBar = (props: RouteComponentProps) => {\r\n    const [navList, setList] = useState<string[]>([]);\r\n    useEffect(() => {\r\n        setList(['首页', 'HTML', 'CSS', 'React']);\r\n    }, []);\r\n    let { pathname = '' } = props.history.location;\r\n    return pathname === '/' ? null : (\r\n        <div className=\"blog_navbar\">\r\n            {navList.map((ele, index) => (\r\n                <div className=\"blog_navbar-item\" key={index}>\r\n                    {ele}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nexport default withRouter(NavBar) as any;\r\n","import React from 'react';\nimport RoutePart from './route';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Navbar from 'components/NavBar';\nimport './app.scss';\nexport default function App() {\n    return (\n        <div className=\"blog\">\n            <Router>\n                <Navbar />\n                <RoutePart />\n            </Router>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}